import axios from "axios";
import { env } from "../config/env.js";

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Payments API
 */
export class TelegramPaymentsService {
  private readonly botToken: string;
  private readonly baseUrl: string;

  constructor() {
    this.botToken = env.botToken;
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç —ñ–Ω–≤–æ–π—Å—É –¥–ª—è Bot subscription
   * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î payments.exportInvoice
   */
  async exportInvoice(invoice: any): Promise<string> {
    try {
      const response = await axios.post(
        `${this.baseUrl}/exportInvoice`,
        invoice
      );

      if (response.data.ok) {
        return response.data.result.invoice_link;
      } else {
        throw new Error(`Telegram API error: ${response.data.description}`);
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —ñ–Ω–≤–æ–π—Å—É:", error);
      throw error;
    }
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Bot subscription —ñ–Ω–≤–æ–π—Å—É
   */
  async createBotSubscriptionInvoice(
    title: string,
    description: string,
    payload: string,
    amount: number,
    userId: number
  ): Promise<string> {
    const invoice = {
      title,
      description,
      payload,
      currency: "XTR",
      prices: [
        {
          label: "Premium Subscription (1 month)",
          amount: amount,
        },
      ],
      subscription_period: 30 * 24 * 60 * 60, // 30 –¥–Ω—ñ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      recurring: true,
    };

    console.log("üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Bot subscription —ñ–Ω–≤–æ–π—Å—É:", invoice);

    return await this.exportInvoice(invoice);
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤—ñ—Å—É
export const telegramPayments = new TelegramPaymentsService();
