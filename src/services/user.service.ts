import {
  getFirestore,
  getAuth,
  FieldValue,
  Timestamp,
} from "../config/firebase.config";
import { env } from "../config/env";
import {
  FIRESTORE_COLLECTIONS,
  REFERRAL_PREFIX,
  AD_PREFIX,
  UID_PREFIX,
} from "../constants/firebase";
import {
  TelegramUser,
  FirestoreUser,
  CreateUserResult,
  StartParam,
  CreateSubscriptionData,
  UpdateSubscriptionData,
} from "../types/user.types";

const db = getFirestore();
const auth = getAuth();

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è UID –¥–ª—è Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export function createTelegramUid(telegramId: number): string {
  return `${UID_PREFIX}${telegramId}`;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start
 * –§–æ—Ä–º–∞—Ç: "ref_123456789" –∞–±–æ "ad_google_campaign"
 */
export function parseStartParam(startParam: string | null): StartParam {
  if (!startParam) {
    return { referrerId: null, adCode: null };
  }

  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ref_123456789
  if (startParam.startsWith(REFERRAL_PREFIX)) {
    const referrerId = startParam.slice(REFERRAL_PREFIX.length);
    return { referrerId, adCode: null };
  }

  // –†–µ–∫–ª–∞–º–Ω–∏–π –∫–æ–¥: ad_google_campaign
  if (startParam.startsWith(AD_PREFIX)) {
    const adCode = startParam.slice(AD_PREFIX.length);
    return { referrerId: null, adCode };
  }

  return { referrerId: null, adCode: null };
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
 */
export async function userExists(uid: string): Promise<boolean> {
  try {
    const userDoc = await db
      .collection(FIRESTORE_COLLECTIONS.USERS)
      .doc(uid)
      .get();
    return userDoc.exists;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    return false;
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firestore
 */
export async function getUser(uid: string): Promise<FirestoreUser | null> {
  try {
    const userDoc = await db
      .collection(FIRESTORE_COLLECTIONS.USERS)
      .doc(uid)
      .get();

    if (!userDoc.exists) {
      return null;
    }

    return userDoc.data() as FirestoreUser;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    return null;
  }
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
 */
async function validateReferral(
  referrerId: string,
  telegramUser: TelegramUser
): Promise<boolean> {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É (–º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º)
  if (!/^\d+$/.test(referrerId)) {
    console.log("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç referrerId:", referrerId);
    return false;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª
  if (telegramUser.id.toString() === referrerId) {
    console.log("‚ùå –°–ø—Ä–æ–±–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–∞");
    return false;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  const referrerUid = createTelegramUid(parseInt(referrerId));
  const referrerExists = await userExists(referrerUid);

  if (!referrerExists) {
    console.log("‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ —ñ—Å–Ω—É—î:", referrerUid);
    return false;
  }

  return true;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Custom Token –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 */
export async function generateCustomToken(uid: string): Promise<string> {
  try {
    const customToken = await auth.createCustomToken(uid);
    console.log("‚úÖ Custom Token –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–ª—è:", uid);
    return customToken;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó Custom Token:", error);
    throw error;
  }
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è Custom Claims –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function updateUserClaims(
  uid: string,
  claims: { stars?: number; subscription?: string | null }
): Promise<void> {
  try {
    await auth.setCustomUserClaims(uid, claims);
    console.log("‚úÖ Custom Claims –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è:", uid, claims);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Custom Claims:", error);
    throw error;
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function handleExistingUser(
  uid: string,
  telegramUser: TelegramUser
): Promise<CreateUserResult> {
  console.log("üë§ –Ü—Å–Ω—É—é—á–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", uid);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
  await db
    .collection(FIRESTORE_COLLECTIONS.USERS)
    .doc(uid)
    .update({
      first_name: telegramUser.first_name,
      last_name: telegramUser.last_name || null,
      username: telegramUser.username || null,
      language_code: telegramUser.language_code || null,
      is_premium: telegramUser.is_premium || false,
      updatedAt: Timestamp.now(),
    });

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è claims
  const userData = await getUser(uid);
  const stars = userData?.stars?.total || 0;

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è claims
  await updateUserClaims(uid, { stars, subscription: null });

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
  const customToken = await generateCustomToken(uid);

  return { uid, isNewUser: false, customToken };
}

/**
 * –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function handleNewUser(
  uid: string,
  telegramUser: TelegramUser,
  startParam: string | null
): Promise<CreateUserResult> {
  console.log("üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", uid);

  const { referrerId, adCode } = parseStartParam(startParam);

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  const isValidReferral = referrerId
    ? await validateReferral(referrerId, telegramUser)
    : false;

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–æ–Ω—É—Å—ñ–≤
  let welcomeBonus = env.welcomeBonusStars;
  let referralBonus = 0;

  if (isValidReferral) {
    referralBonus = env.referralBonusStars;
    welcomeBonus += referralBonus;
  }

  // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const userData: FirestoreUser = {
    id: telegramUser.id,
    first_name: telegramUser.first_name,
    last_name: telegramUser.last_name,
    username: telegramUser.username,
    language_code: telegramUser.language_code,
    is_premium: telegramUser.is_premium || false,
    allows_write_to_pm: true,
    createdAt: Timestamp.now(),
    updatedAt: Timestamp.now(),
    referrerId: isValidReferral ? referrerId : null,
    referrals: {
      count: 0,
      totalStarsEarned: 0,
    },
    stars: {
      total: welcomeBonus,
      incoming: [welcomeBonus],
      outgoing: [],
    },
  };

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
  if (adCode) {
    userData.adSource = {
      code: adCode,
      joinedAt: Timestamp.now(),
    };
  }

  const userRef = db.collection(FIRESTORE_COLLECTIONS.USERS).doc(uid);

  // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
  await db.runTransaction(async (transaction) => {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    transaction.set(userRef, userData);

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (—è–∫—â–æ –≤–∞–ª—ñ–¥–Ω–∏–π)
    if (isValidReferral && referrerId) {
      const referrerUid = createTelegramUid(parseInt(referrerId));
      const referrerRef = db
        .collection(FIRESTORE_COLLECTIONS.USERS)
        .doc(referrerUid);

      transaction.update(referrerRef, {
        "stars.total": FieldValue.increment(referralBonus),
        "stars.incoming": FieldValue.arrayUnion(referralBonus),
        "referrals.count": FieldValue.increment(1),
        "referrals.totalStarsEarned": FieldValue.increment(referralBonus),
        updatedAt: Timestamp.now(),
      });

      console.log(
        `‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å ${referralBonus} –¥–æ–¥–∞–Ω–æ –¥–ª—è:`,
        referrerUid
      );
    }
  });

  console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ Firestore:", uid);

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Firebase Auth
  try {
    await auth.createUser({
      uid,
      displayName: `${telegramUser.first_name} ${
        telegramUser.last_name || ""
      }`.trim(),
      email: `${telegramUser.id}@telegram.local`, // –§–µ–π–∫–æ–≤–∏–π email –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    });
    console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ Firebase Auth:", uid);
  } catch (error: any) {
    if (error.code === "auth/uid-already-exists") {
      console.log("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î –≤ Auth:", uid);
    } else {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Auth:", error);
      throw error;
    }
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Custom Claims
  await updateUserClaims(uid, { stars: welcomeBonus, subscription: null });

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Custom Token
  const customToken = await generateCustomToken(uid);

  return { uid, isNewUser: true, customToken };
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function createUser(
  telegramUser: TelegramUser,
  startParam: string | null = null
): Promise<CreateUserResult> {
  const uid = createTelegramUid(telegramUser.id);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
  const exists = await userExists(uid);

  if (exists) {
    return handleExistingUser(uid, telegramUser);
  } else {
    return handleNewUser(uid, telegramUser, startParam);
  }
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function updateUser(
  uid: string,
  updates: Partial<FirestoreUser>
): Promise<void> {
  try {
    await db
      .collection(FIRESTORE_COLLECTIONS.USERS)
      .doc(uid)
      .update({
        ...updates,
        updatedAt: Timestamp.now(),
      });
    console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–Ω–æ–≤–ª–µ–Ω–æ:", uid);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    throw error;
  }
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function createSubscription(
  data: CreateSubscriptionData
): Promise<void> {
  try {
    const now = Timestamp.now();
    const endDate = new Date(now.toDate().getTime() + data.period * 1000);
    const nextBillingDate = new Date(endDate.getTime());

    const subscriptionData = {
      id: data.subscriptionId,
      type: "premium" as const,
      status: "active" as const,
      startDate: now,
      endDate: Timestamp.fromDate(endDate),
      nextBillingDate: Timestamp.fromDate(nextBillingDate),
      amount: data.amount,
      period: data.period,
      chargeId: data.chargeId,
    };

    await db.collection(FIRESTORE_COLLECTIONS.USERS).doc(data.userId).update({
      subscription: subscriptionData,
      updatedAt: Timestamp.now(),
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è Custom Claims
    await updateUserClaims(data.userId, {
      subscription: "premium",
      stars: (await getUser(data.userId))?.stars?.total || 0,
    });

    console.log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ:", {
      userId: data.userId,
      subscriptionId: data.subscriptionId,
      endDate: endDate.toISOString(),
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏:", error);
    throw error;
  }
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
 */
export async function updateSubscription(
  userId: string,
  data: UpdateSubscriptionData
): Promise<void> {
  try {
    const userDoc = await db
      .collection(FIRESTORE_COLLECTIONS.USERS)
      .doc(userId)
      .get();

    if (!userDoc.exists) {
      throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
    }

    const userData = userDoc.data() as FirestoreUser;
    const currentSubscription = userData.subscription;

    if (!currentSubscription) {
      throw new Error("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
    }

    const updatedSubscription = {
      ...currentSubscription,
      ...data,
      id: currentSubscription.id, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π ID
    };

    await db.collection(FIRESTORE_COLLECTIONS.USERS).doc(userId).update({
      subscription: updatedSubscription,
      updatedAt: Timestamp.now(),
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è Custom Claims
    const claimsSubscription = data.status === "active" ? "premium" : null;
    await updateUserClaims(userId, {
      subscription: claimsSubscription,
      stars: userData.stars?.total || 0,
    });

    console.log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ:", {
      userId,
      subscriptionId: data.subscriptionId,
      status: data.status,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏:", error);
    throw error;
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function getActiveSubscription(
  userId: string
): Promise<FirestoreUser["subscription"] | null> {
  try {
    const userData = await getUser(userId);

    if (!userData?.subscription) {
      return null;
    }

    const now = new Date();
    const endDate = userData.subscription.endDate.toDate();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (userData.subscription.status === "active" && endDate > now) {
      return userData.subscription;
    }

    return null;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏:", error);
    return null;
  }
}

/**
 * –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
 */
export async function renewSubscription(userId: string): Promise<void> {
  try {
    const userData = await getUser(userId);

    if (!userData?.subscription) {
      throw new Error("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
    }

    const currentSubscription = userData.subscription;
    const newEndDate = new Date(
      currentSubscription.endDate.toDate().getTime() +
        currentSubscription.period * 1000
    );
    const newNextBillingDate = new Date(newEndDate.getTime());

    await updateSubscription(userId, {
      subscriptionId: currentSubscription.id,
      status: "active",
      endDate: Timestamp.fromDate(newEndDate),
      nextBillingDate: Timestamp.fromDate(newNextBillingDate),
    });

    console.log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ:", {
      userId,
      newEndDate: newEndDate.toISOString(),
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏:", error);
    throw error;
  }
}
