import { Context } from "telegraf";
import axios from "axios";
import { env } from "../config/env";
import {
  createTelegramUid,
  createSubscription,
} from "../services/user.service";

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ pre-checkout query
 */
export async function handlePreCheckoutQuery(ctx: Context): Promise<void> {
  await ctx.answerPreCheckoutQuery(true);
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤
 */
export async function handleSuccessfulPayment(
  ctx: Context,
  next: () => Promise<void>
): Promise<void> {
  const payment = (ctx.message as any)?.successful_payment;

  if (!payment) {
    return next();
  }

  const payload = payment.invoice_payload;
  const telegramUserId = ctx.from?.id;
  const userId = `telegram:${telegramUserId}`;
  const firebaseUserId = createTelegramUid(telegramUserId!);

  try {
    // –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ (Bot subscriptions)
    if (payload.includes("subscription_")) {
      // –ü–∞—Ä—Å–∏–º–æ payload –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–∫–∏
      const payloadParts = payload.split("_");
      const subscriptionType = payloadParts[1]; // "premium"
      const telegramUserId = payloadParts[2]; // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

      // –î–ª—è Bot subscriptions chargeId —Ü–µ invoice_slug –∑ Telegram
      const chargeId =
        payment.invoice_slug ||
        payment.provider_charge_id ||
        `charge_${Date.now()}`;

      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –≤ Firestore
      const subscriptionId = `sub_${telegramUserId}_${Date.now()}`;

      await createSubscription({
        userId: firebaseUserId,
        subscriptionId,
        chargeId,
        amount: payment.total_amount, // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫
        period: 30 * 24 * 60 * 60, // 30 –¥–Ω—ñ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è Bot subscriptions)
      });

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ webhook (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–∏—Å—Ç–µ–º)
      await axios.post(
        env.subscriptionWebhook,
        {
          userId,
          payload,
          subscriptionId,
          chargeId,
          invoiceSlug: payment.invoice_slug,
          totalAmount: payment.total_amount,
          currency: payment.currency,
        },
        { headers: { "x-api-key": env.subscriptionApiKey } }
      );

      console.log("‚úÖ Bot subscription —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ Firestore:", {
        userId: firebaseUserId,
        subscriptionId,
        chargeId,
        invoiceSlug: payment.invoice_slug,
        totalAmount: payment.total_amount,
      });

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      await ctx.reply(
        "üéâ **Congratulations!** Your premium subscription is now active!\n\n" +
          "‚ú® You now have access to:\n" +
          "‚Ä¢ Unlimited AI conversations\n" +
          "‚Ä¢ AI image generation\n" +
          "‚Ä¢ Priority support\n" +
          "‚Ä¢ All premium features\n\n" +
          "Your subscription will automatically renew monthly. Enjoy! üåü\n\n" +
          `üìã **Subscription ID:** \`${subscriptionId}\`\n` +
          `üí∞ **Amount:** ${payment.total_amount} ${payment.currency}`,
        { parse_mode: "Markdown" }
      );
    }
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑—ñ—Ä–æ–∫
    else if (payload.includes("stars_")) {
      const parts = payload.split("_");
      const amount = parts[1] ?? "0";

      await axios.post(
        env.starsWebhook,
        { userId, amount, payload },
        { headers: { "x-api-key": env.subscriptionApiKey } }
      );
      console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑—ñ—Ä–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∞:", userId, amount);
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É:", error);

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    await axios.post(env.logSubscriptionFailureUrl, {
      userId,
      payload,
      date: new Date().toISOString(),
      type: payload.includes("stars_") ? "stars_purchase" : "subscription",
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await ctx.reply(
      "‚ùå Sorry, there was an issue processing your payment. " +
        "Please contact support if the problem persists.",
      { parse_mode: "Markdown" }
    );
  }

  return next();
}
