import { Context } from "telegraf";
import { createUser } from "../../services/user.service";
import { TelegramUser } from "../../types/user.types";
import {
  welcomeMessages,
  referralMessages,
  referralButtonText,
  defaultButtonText,
  SupportedLanguage,
} from "../../translations.js";
import { env } from "../../config/env";
import { handleSubscription } from "./subscription.command.js";

const IMAGES = {
  default:
    "https://firebasestorage.googleapis.com/v0/b/charmify-e7acc.firebasestorage.app/o/bot%2Fnew_cover.png?alt=media&token=4845e9ed-ec29-4bb1-9e23-54d39241b097",
  referral:
    "https://firebasestorage.googleapis.com/v0/b/charmify-e7acc.firebasestorage.app/o/bot%2Fcover_for_refferal.png?alt=media&token=abc3b4d9-94a6-4b8c-b37a-44c4da11a41d",
};

/**
 * –í–∏–ª—É—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function extractStartParam(messageText: string | undefined): string | null {
  if (!messageText) return null;
  const match = messageText.match(/^\/start\s+(.+)$/);
  return match ? match[1] : null;
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
 */
export async function handleStart(ctx: Context): Promise<void> {
  try {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram
    const telegramUser = ctx.from;
    if (!telegramUser) {
      console.error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
      return;
    }

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏
    const lang: SupportedLanguage =
      (telegramUser.language_code?.split("-")[0] as SupportedLanguage) || "en";

    // –í–∏–ª—É—á–µ–Ω–Ω—è start –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const startPayload = extractStartParam((ctx.message as any)?.text);
    const isReferral = startPayload?.startsWith("ref_");

    console.log("üì• Start payload:", startPayload);
    console.log("üîó Is referral:", isReferral);

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userData: TelegramUser = {
      id: telegramUser.id,
      first_name: telegramUser.first_name,
      last_name: telegramUser.last_name,
      username: telegramUser.username,
      language_code: telegramUser.language_code,
      is_premium: (telegramUser as any).is_premium,
      is_bot: telegramUser.is_bot,
    };

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ + –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è Custom Token
    const { isNewUser, customToken } = await createUser(userData, startPayload);

    console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–æ–±–ª–µ–Ω–æ:", {
      id: telegramUser.id,
      isNewUser,
      hasToken: !!customToken,
    });

    // –Ø–∫—â–æ start-–ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∫–∞–∑—É—î –Ω–∞ —ñ–Ω–≤–æ–π—Å –ø—ñ–¥–ø–∏—Å–∫–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ–¥—Ä–∞–∑—É –ø—ñ–¥–ø–∏—Å–∫—É
    if (startPayload === "invoice-Claudia-subscription") {
      await handleSubscription(ctx);
      return; // –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π welcome
    }

    // –í–∏–±—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const image = isReferral ? IMAGES.referral : IMAGES.default;

    // –í–∏–±—ñ—Ä —Ç–µ–∫—Å—Ç—É
    const caption = isReferral
      ? referralMessages[lang] || referralMessages.en
      : welcomeMessages[lang] || welcomeMessages.en;

    // –í–∏–±—ñ—Ä —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    const buttonText = isReferral
      ? referralButtonText[lang] || referralButtonText.en
      : defaultButtonText[lang] || defaultButtonText.en;

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è URL –¥–ª—è Mini App –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º startapp
    const launchUrl = startPayload
      ? `${env.miniAppUrl}?startapp=${startPayload}`
      : env.miniAppUrl;

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await ctx.replyWithPhoto(image, {
      caption,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: buttonText, web_app: { url: launchUrl } }]],
      },
    });

    // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ Custom Token (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    // –ú–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–æ–∫–µ–Ω –≤ Firestore –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ web_app init_data
    console.log("üîë Custom Token –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è");
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ /start:", error);
    await ctx.reply("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}
