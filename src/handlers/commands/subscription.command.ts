import { Context } from "telegraf";
import { env } from "../../config/env.js";

// –î–æ–¥–∞—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é env –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
try {
  if (!env.botToken) {
    throw new Error("BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π");
  }
  console.log(
    "‚úÖ Bot token –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π:",
    env.botToken.substring(0, 10) + "..."
  );
} catch (error) {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:", error);
}

export async function handleSubscription(ctx: Context): Promise<void> {
  try {
    const subscriptionText = `
üåü **Premium Subscription**

Unlock unlimited possibilities with our premium subscription!

‚ú® **What you get:**
‚Ä¢ üí¨ Unlimited conversations with AI
‚Ä¢ üé® AI image generation without limits
‚Ä¢ üöÄ Priority access to new features
‚Ä¢ üì± Advanced customization options
‚Ä¢ üî• Exclusive premium content
‚Ä¢ üíé VIP support and faster responses

üí∞ **Price:** 1 Telegram Star per month
‚è∞ **Billing:** Automatic monthly renewal

Ready to upgrade your experience? Click the button below to subscribe!

*Cancel anytime - no hidden fees or commitments.*
`;

    const subscriptionKeyboard = {
      inline_keyboard: [
        [
          {
            text: "‚≠ê Subscribe for 1 Star/month",
            callback_data: "subscribe_premium",
          },
        ],
        [
          {
            text: "üìã View Benefits",
            callback_data: "view_benefits",
          },
          {
            text: "‚ùì Help",
            callback_data: "subscription_help",
          },
        ],
      ],
    };

    await ctx.reply(subscriptionText, {
      parse_mode: "Markdown",
      reply_markup: subscriptionKeyboard,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ /subscription:", error);
    await ctx.reply("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
 */
export async function handleSubscriptionCallback(ctx: Context): Promise<void> {
  const callbackData = (ctx.callbackQuery as any)?.data;

  switch (callbackData) {
    case "subscribe_premium":
      await handleSubscribePremium(ctx);
      break;
    case "view_benefits":
      await handleViewBenefits(ctx);
      break;
    case "subscription_help":
      await handleSubscriptionHelp(ctx);
      break;
    default:
      await ctx.answerCbQuery("Unknown action");
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–µ–º—ñ—É–º
 */
async function handleSubscribePremium(ctx: Context): Promise<void> {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.answerCbQuery("‚ùå Unable to identify user");
      return;
    }

    console.log("üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Bot subscription –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userId);

    await ctx.answerCbQuery();

    // –°—Ç–≤–æ—Ä—é—î–º–æ Bot subscription —ñ–Ω–≤–æ–π—Å (–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç)
    const invoice = {
      title: "Premium Subscription",
      description:
        "Unlimited AI conversations, image generation, and premium features",
      payload: `subscription_premium_${userId}`,
      provider_token: "", // –î–ª—è Telegram Stars
      currency: "XTR", // Telegram Stars
      prices: [
        {
          label: "Premium Subscription (1 month)",
          amount: 1, // 1 Telegram Star
        },
      ],
      // –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Bot subscription
      subscription_period: 30 * 24 * 60 * 60, // 30 –¥–Ω—ñ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      recurring: true,
    };

    console.log("üìã Bot subscription —ñ–Ω–≤–æ–π—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ:", invoice);

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ replyWithInvoice - Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–∏—Ç—å —è–∫ Bot subscription
    // —á–µ—Ä–µ–∑ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å subscription_period —Ç–∞ recurring
    await ctx.replyWithInvoice(invoice);

    console.log("‚úÖ Bot subscription —ñ–Ω–≤–æ–π—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É:", error);
    console.error("‚ùå –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:", {
      message: error instanceof Error ? error.message : "Unknown error",
      stack: error instanceof Error ? error.stack : undefined,
      userId: ctx.from?.id,
    });
    await ctx.answerCbQuery(
      "‚ùå Error creating subscription. Please try again."
    );
  }
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ—Ä–µ–≤–∞–≥
 */
async function handleViewBenefits(ctx: Context): Promise<void> {
  const benefitsText = `
üéØ **Detailed Benefits:**

üí¨ **Unlimited Conversations**
‚Ä¢ No daily limits on AI chats
‚Ä¢ Extended conversation history
‚Ä¢ Advanced context understanding

üé® **AI Image Generation**
‚Ä¢ Generate unlimited images
‚Ä¢ High-resolution outputs
‚Ä¢ Multiple art styles available
‚Ä¢ Custom prompts and settings

üöÄ **Priority Features**
‚Ä¢ Early access to new AI models
‚Ä¢ Beta features and testing
‚Ä¢ Advanced customization options
‚Ä¢ Faster response times

üì± **Premium Interface**
‚Ä¢ Custom themes and layouts
‚Ä¢ Advanced settings panel
‚Ä¢ Export conversations
‚Ä¢ Priority support queue

üíé **Exclusive Content**
‚Ä¢ Premium AI models
‚Ä¢ Specialized tools and utilities
‚Ä¢ Educational content and tutorials
‚Ä¢ Community access
`;

  await ctx.answerCbQuery();
  await ctx.reply(benefitsText, { parse_mode: "Markdown" });
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–ø–æ–º–æ–≥–∏ –∑ –ø—ñ–¥–ø–∏—Å–∫–æ—é
 */
async function handleSubscriptionHelp(ctx: Context): Promise<void> {
  const helpText = `
‚ùì **Subscription Help:**

üîπ **How to Subscribe:**
1. Click "Subscribe for 1 Star/month"
2. Complete payment with Telegram Stars
3. Enjoy premium features immediately!

üîπ **Billing:**
‚Ä¢ Monthly automatic renewal
‚Ä¢ Cancel anytime from Telegram settings
‚Ä¢ No hidden fees or charges

üîπ **Payment:**
‚Ä¢ Uses Telegram Stars only
‚Ä¢ Secure payment processing
‚Ä¢ Instant activation

üîπ **Cancellation:**
‚Ä¢ Go to Telegram Settings ‚Üí Payments
‚Ä¢ Find your subscription
‚Ä¢ Cancel anytime, no penalties

Need more help? Contact our support team!
`;

  await ctx.answerCbQuery();
  await ctx.reply(helpText, { parse_mode: "Markdown" });
}
